from django.db import models
from django.contrib.auth import get_user_model

User = get_user_model()

class CategoryQuerySet(models.QuerySet):
    def for_user(self, user):
        return self.filter(user=user)
    
    def income_categories(self):
        return self.filter(category_type='income')
    
    def expense_categories(self):
        return self.filter(category_type='expense')
    
    def default_categories(self):
        return self.filter(is_default=True)
    
    def custom_categories(self):
        return self.filter(is_default=False)

class CategoryManager(models.Manager):
    def get_queryset(self):
        return CategoryQuerySet(self.model, using=self._db)
    
    def for_user(self, user):
        return self.get_queryset().for_user(user)
    
    def income_categories(self):
        return self.get_queryset().income_categories()
    
    def expense_categories(self):
        return self.get_queryset().expense_categories()

class Category(models.Model):
    CATEGORY_TYPES = [
        ('income', '‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö'),
        ('expense', '‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢'),
    ]
    
    COLOR_CHOICES = [
        ('#FF6B6B', '‡πÅ‡∏î‡∏á'),
        ('#4ECDC4', '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏ô‡πâ‡∏≥‡∏ó‡∏∞‡πÄ‡∏•'),
        ('#45B7D1', '‡∏ü‡πâ‡∏≤'),
        ('#96CEB4', '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏≠‡πà‡∏≠‡∏ô'),
        ('#FECA57', '‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á'),
        ('#FF9FF3', '‡∏ä‡∏°‡∏û‡∏π'),
        ('#54A0FF', '‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô'),
        ('#5F27CD', '‡∏°‡πà‡∏ß‡∏á'),
        ('#00D2D3', '‡∏ü‡πâ‡∏≤‡πÉ‡∏™'),
        ('#FF9F43', '‡∏™‡πâ‡∏°'),
        ('#10AC84', '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß'),
        ('#EE5A24', '‡∏™‡πâ‡∏°‡πÅ‡∏î‡∏á'),
        ('#0ABDE3', '‡∏ü‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô'),
        ('#C44569', '‡πÅ‡∏î‡∏á‡∏≠‡πà‡∏≠‡∏ô'),
        ('#40739E', '‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏°'),
    ]
    
    ICON_CHOICES = [
        ('üí∞', '‡πÄ‡∏á‡∏¥‡∏ô'),
        ('üè†', '‡∏ö‡πâ‡∏≤‡∏ô'),
        ('üçï', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£'),
        ('‚õΩ', '‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô'),
        ('üöó', '‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå'),
        ('üé¨', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á'),
        ('üëï', '‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤'),
        ('üíä', '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û'),
        ('üìö', '‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤'),
        ('üíº', '‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à'),
        ('üéÅ', '‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç'),
        ('‚úàÔ∏è', '‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á'),
        ('üì±', '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ'),
        ('üè¶', '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£'),
        ('üí≥', '‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï'),
        ('üõçÔ∏è', '‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á'),
        ('üè•', '‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•'),
        ('üéµ', '‡∏î‡∏ô‡∏ï‡∏£‡∏µ'),
        ('‚ö°', '‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏π‡∏õ‡πÇ‡∏†‡∏Ñ'),
        ('üçΩÔ∏è', '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£'),
    ]
    
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='categories')
    name = models.CharField(max_length=100, verbose_name='‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà')
    category_type = models.CharField(max_length=10, choices=CATEGORY_TYPES, verbose_name='‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó')
    icon = models.CharField(max_length=10, choices=ICON_CHOICES, default='üí∞', verbose_name='‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô')
    color = models.CharField(max_length=7, choices=COLOR_CHOICES, default='#FF6B6B', verbose_name='‡∏™‡∏µ')
    is_default = models.BooleanField(default=False, verbose_name='‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î')
    
    objects = CategoryManager()
    
    class Meta:
        verbose_name = '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà'
        verbose_name_plural = '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà'
        ordering = ['category_type', 'name']
        unique_together = ['user', 'name', 'category_type']
        indexes = [
            models.Index(fields=['user', 'category_type']),
            models.Index(fields=['user', 'is_default']),
            models.Index(fields=['category_type', 'name']),
        ]
    
    def __str__(self):
        return f"{self.get_category_type_display()} - {self.name}"
    
    @property
    def display_name(self):
        return f"{self.icon} {self.name}"
